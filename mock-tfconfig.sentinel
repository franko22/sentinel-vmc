import "strings"
import "types"

_modules = {
	"root": {
		"data": {
			"terraform_remote_state": {
				"aws-core": {
					"config": {
						"backend": "remote",
						"config": {
							"organization": "grantorchard",
							"workspaces": {
								"name": "terraform-vmc-aws-core",
							},
						},
					},
					"provisioners": null,
					"references": {
						"backend": [],
						"config":  [],
					},
				},
			},
			"vmc_connected_accounts": {
				"this": {
					"config":       {},
					"provisioners": null,
					"references": {
						"account_number": [
							"local.aws_account_number",
						],
					},
				},
			},
		},
		"modules": {},
		"outputs": {},
		"providers": {
			"vmc": {
				"alias": {
					"": {
						"config": {},
						"references": {
							"org_id": [
								"var.org_id",
							],
							"refresh_token": [
								"var.refresh_token",
							],
						},
						"version": "",
					},
				},
				"config": {},
				"references": {
					"org_id": [
						"var.org_id",
					],
					"refresh_token": [
						"var.refresh_token",
					],
				},
				"version": "",
			},
		},
		"resources": {
			"vmc_sddc": {
				"this": {
					"config": {
						"account_link_sddc_config": [
							{},
						],
						"delay_account_link":  false,
						"deployment_type":     "SingleAZ",
						"provider_type":       "AWS",
						"sddc_type":           "1NODE",
						"skip_creating_vxlan": false,
						"timeouts":            null,
					},
					"provisioners": null,
					"references": {
						"account_link_sddc_config": [
							{
								"connected_account_id": [
									"data.vmc_connected_accounts.this",
								],
								"customer_subnet_ids": [
									"local.public_subnets",
								],
							},
						],
						"delay_account_link": [],
						"deployment_type":    [],
						"host_instance_type": [
							"var.host_instance_type",
						],
						"num_host": [
							"var.sddc_num_hosts",
						],
						"provider_type": [],
						"region": [
							"var.region",
						],
						"sddc_name": [
							"var.sddc_name",
						],
						"sddc_type":           [],
						"skip_creating_vxlan": [],
						"sso_domain": [
							"var.sso_domain",
						],
						"timeouts": [],
						"vpc_cidr": [
							"var.vmc_vpc_cidr",
						],
						"vxlan_subnet": [
							"var.vxlan_subnet",
						],
					},
				},
			},
		},
		"variables": {
			"host_instance_type": {
				"default":     "I3_METAL",
				"description": "",
			},
			"org_id": {
				"default":     null,
				"description": "",
			},
			"refresh_token": {
				"default":     null,
				"description": "",
			},
			"region": {
				"default":     "eu-west-2",
				"description": "",
			},
			"sddc_name": {
				"default":     "VMCandTFC",
				"description": "",
			},
			"sddc_num_hosts": {
				"default":     1,
				"description": "",
			},
			"sso_domain": {
				"default":     "vmc.local",
				"description": "",
			},
			"vmc_vpc_cidr": {
				"default":     "10.2.0.0/16",
				"description": "",
			},
			"vxlan_subnet": {
				"default":     "10.10.10.0/23",
				"description": "",
			},
		},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
